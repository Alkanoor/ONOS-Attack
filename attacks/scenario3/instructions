Prérequis théorique : -Le contrôleur qui fait suivre un certain nombre de paquets automatiquement

Prérequis pratique : -ONOS dans sa configuration initiale, ou du moins, qui fait suivre un certain nombre de paquets automatiquement


Depuis mininet :
sudo ./general_topology.py
    h11 python scenario3/packet_in_flooding.py 06:06:06:06:06:06 h11-eth0 &
    #(attendre quelques secondes)
    iperf h1 h8
    iperf h4 h8
    iperf h12 h8

Comparer avec
sudo ./general_topology.py
    iperf h1 h8
    iperf h4 h8
    iperf h12 h8


Depuis le contrôleur :

wireshark (filtrer avec "tcp.port == 6633 && openflow_v4")


Attaque :
    h11 envoie à un rythme soutenu de nombreux paquets au switch qui le relie à ONOS, avec des adresses ethernet source et IP source aléatoires, et ayant comme adresses de destination celle du switch cible.
    ONOS, en mode forwarding au moins partiel, pousse des règles sur la cible jusqu'à saturer sa table de flux et provoquer un déni de service.

Résultat expérimental :
    Sur wireshark on observe un nombre très important de PACKET_IN transmis au contrôleur et de OFPT_FLOW_MOD qui correspondent à l'ajout ou la modification de règles sur les switchs.
    On observe une chute drastique du débit dès lors que les paquets doivent passer par le switch visé comme le confirme un simple ping.

Conclusion :
    Si le contrôleur est configuré pour faire suivre une majorité de paquets, cela le menace d'un deni de service important et relativement facile à exécuter dès lors qu'on a une possibilité d'injection de PACKET_IN dans le réseau.
